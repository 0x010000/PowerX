syntax = "v1"

info(
    title: "产品服务"
    desc: "产品服务"
    author: "MichaelHu"
    email: "matrix-x@artisan-cloud.com"
    version: "v1"
)


@server(
    group: admin/product
    prefix: /api/v1/admin/product
    middleware: EmployeeJWTAuth
)

service PowerX {
    @doc "查询产品列表"
    @handler ListProducts
    get /products (GetProductListRequest) returns (GetProductListReply)

    @doc "创建产品"
    @handler CreateProduct
    post /products (UpsertProductRequest) returns (UpsertProductReply)

    @doc "编辑产品"
    @handler UpdateProduct
    patch /products/:id (UpdateProductRequest) returns (UpdateProductReply)

    @doc "删除产品"
    @handler DeleteProduct
    delete /products/:id (DeleteProductRequest) returns (DeleteProductReply)

    @doc "分配产品品类给产品品类分类"
    @handler AssignProductToProductCategory
    post /products/:id/actions/assign-to-product-categroy (AssignProductToProductCategoryRequest) returns (AssignProductToProductCategoryReply)
}

type (
    ProductSpecific {
        Inventory string `json:"inventory"`
        Weight string `json:"weight"`
        Volume string `json:"volume"`
        Encode string `json:"encode"`
        BarCode string `json:"barCode"`
        Extra string `json:"extra"`
    }

    Product {
        Id int64 `json:"id"`
        Name string `json:"name"`
        Type string `json:"type"`
        Plan string `json:"plan"`
        AccountingCategory string `json:"accountingCategory"`
        CanSellOnline string `json:"canSellOnline"`
        CanUseForDeduct string `json:"canUseForDeduct"`
        ApprovalStatus string `json:"approvalStatus"`
        IsActivated string `json:"isActivated"`
        Description string `json:"description"`
        CoverURL string `json:"coverURL"`
        PurchasedQuantity string `json:"purchasedQuantity"`
        ValidityPeriodDays string `json:"validityPeriodDays"`
        SaleStartDate string `json:"saleStartDate"`
        SaleEndDate string `json:"saleEndDate"`
        CreatedAt string `json:"createdAt"`
        ProductSpecific
    }
)
type (
    GetProductListRequest struct {
        ProductType string `form:"productType,optional"`
        Keys []string `form:"keys,optional"`
        DescBy string `form:"descBy,optional,options=createdAt|updatedAt"`
        PageIndex int `form:"pageIndex,optional"`
        PageSize int `form:"pageSize,optional"`
    }


    GetProductListReply struct {
        List []Product `json:"list"`
        PageIndex int `json:"pageIndex"`
        PageSize int `json:"pageSize"`
        Total int64 `json:"total"`
    }
)

type (
    CreateProductUploadRequest struct {
        FileName string `json:"fileName"`
    }

    CreateProductUploadRequestReply struct {
        ProductKey string `json:"productKey"`
        UploadURL string `json:"uploadURL"`
        ExpiresAt int64 `json:"expiresAt"`
    }
)

type (
    UpsertProductRequest struct {
        ProductKey string `path:"productKey"`
        ProductType string `json:"productType,optional"`
        Meta string `json:"meta,optional"`
        Remark string `json:"remark,optional"`
    }

    UpsertProductReply struct {
        ProductKey string `json:"productKey"`
    }
)

type (
    GetProductByKeyRequest struct {
        ProductKey string `path:"productKey"`
    }

    GetProductByKeyReply struct {
        *Product
    }
)

type (
    DeleteProductRequest struct {
        Key string `path:"key"`
    }

    DeleteProductReply struct {
        Key string `json:"key"`
    }
)


type (
    AssignProductToProductCategoryRequest {
        Id int64 `path:"id"`
        ProductCategoryId int64 `json:"productCategoryId"`
    }

    AssignProductToProductCategoryReply {
        Product
    }
)
