// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	auth "PowerX/internal/handler/auth"
	contact "PowerX/internal/handler/contact"
	customer "PowerX/internal/handler/customer"
	department "PowerX/internal/handler/department"
	employee "PowerX/internal/handler/employee"
	permission "PowerX/internal/handler/permission"
	public "PowerX/internal/handler/public"
	"PowerX/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/customer/v1/customers/:id",
				Handler: customer.GetCustomerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/customer/v1/op/sync-customers",
				Handler: customer.BatchSyncCustomersHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/department/v1/department-tree/:depId",
				Handler: department.GetDepartmentTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/department/v1/departments",
				Handler: department.CreateDepartmentHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/employee/v1/op/sync-employees/:source/:target",
				Handler: employee.SyncEmployeesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/employee/v1/employees/:id",
				Handler: employee.GetEmployeeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/employee/v1/employees",
				Handler: employee.ListEmployeesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/employee/v1/employees",
				Handler: employee.CreateEmployeeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/employee/v1/options",
				Handler: employee.GetEmployeeOptionsHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/api/employee/v1/employees/:id",
				Handler: employee.UpdateEmployeeHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/employee/v1/employees/:id",
				Handler: employee.DeleteEmployeeHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/permission/v1/roles",
				Handler: permission.ListRolesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/permission/v1/roles",
				Handler: permission.CreateRoleHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/permission/v1/recourses",
				Handler: permission.ListRecoursesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/permission/v1/op/assign-auth",
				Handler: permission.AssignAuthHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/auth/v1/op/login/basic",
				Handler: auth.LoginHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/contact/v1/live-qr-codes",
				Handler: contact.CreateLiveQRCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/contact/v1/live-qr-codes",
				Handler: contact.ListLiveQRCodeHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/public/v1/live-qr-code/:uid",
				Handler: public.AccessLiveQRCodeHandler(serverCtx),
			},
		},
	)
}
