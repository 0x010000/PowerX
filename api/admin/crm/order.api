syntax = "v1"

info(
    title: "订单服务"
    desc: "订单服务"
    author: "MichaelHu"
    email: "matrix-x@artisan-cloud.com"
    version: "v1"
)


import "admin/crm/payment.api"

@server(
    group: admin/trade/order
    prefix: /api/v1/admin/trade
    middleware: EmployeeJWTAuth
)
service PowerX {
    @doc("查询订单列表")
    @handler ListOrdersPage
    get /orders/page-list (ListOrdersPageRequest) returns (ListOrdersPageReply)

    @doc("查询订单详情")
    @handler GetOrder
    get /orders/:id (GetOrderRequest) returns (GetOrderReply)

    @doc("创建订单")
    @handler CreateOrder
    post /orders (CreateOrderRequest) returns (CreateOrderReply)

    @doc("更新订单")
    @handler PutOrder
    put /orders/:id (PutOrderRequest) returns (PutOrderReply)

    @doc("部分更新订单")
    @handler PatchOrder
    patch /orders/:id (PatchOrderRequest) returns (PatchOrderReply)

    @doc("删除订单")
    @handler DeleteOrder
    delete /orders/:id (DeleteOrderRequest) returns (DeleteOrderReply)
}

type OrderItem {
    ID int64 `json:"id,optional"`

    OrderId int64 `json:"orderId,optional"`
    PriceBookEntryId int64 `json:"priceBookEntryId,optional"`
    CustomerId int64 `json:"customerId,optional"`
    Type int `json:"type,optional"`
    Status int `json:"status,optional"`
    Quantity int8 `json:"quantity,optional"`
    UnitPrice float64 `json:"unitPrice,optional"`
    ListPrice float64 `json:"listPrice,optional"`
    SellingPrice float64 `json:"sellingPrice,optional"`
}

type Order {
    ID int64 `json:"id,optional"`
    CustomerID int64 `json:"customerId,optional"`
    PaymentType int8 `json:"paymentType,optional"`
    Type int8 `json:"type,optional"`
    Status int8 `json:"status,optional,omitempty"`
    OrderNumber string `json:"orderNumber,optional,omitempty"`
    Discount float64 `json:"discount,optional,omitempty"`
    ListPrice float64 `json:"listPrice,optional,omitempty"`
    SellingPrice float64 `json:"sellingPrice,optional,omitempty"`
    Comment string `json:"comment,optional,omitempty"`
    OrderItems []OrderItem `json:"orderItems,optional,omitempty"`
    Payments []Payment `json:"payments,optional,omitempty"`
    CreatedAt string `json:"createdAt,optional,omitempty"`
}

type ListOrdersPageRequest {
    orderType string `form:"orderType,omitempty"`
    keys []string `form:"keys,omitempty"`
    orderBy string `form:"orderBy,omitempty"`
    pageIndex int `form:"pageIndex,omitempty"`
    pageSize int `form:"pageSize,omitempty"`
}

type ListOrdersPageReply {
    list []Order `json:"list,omitempty"`
    pageIndex int `json:"pageIndex,omitempty"`
    pageSize int `json:"pageSize,omitempty"`
    total int64 `json:"total,omitempty"`
}

type CreateOrderRequest {
    Order
}

type CreateOrderReply {
    orderId int64 `json:"id,omitempty"`
}

type GetOrderRequest {
    orderId int64 `path:"id"`
}

type GetOrderReply {
    Order
}

type PutOrderRequest {
    orderId int64 `path:"id"`
    Order
}

type PutOrderReply {
    Order
}

type PatchOrderRequest {
    orderId int64 `path:"id"`
    Order
}

type PatchOrderReply {
    Order
}

type DeleteOrderRequest {
    orderId int64 `path:"id"`
}

type DeleteOrderReply {
    OrderID int64 `path:"id"`
}

